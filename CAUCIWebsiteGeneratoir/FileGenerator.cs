using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CAUCIWebsiteGeneratoir
{
    class FileGenerator
    {
       

        /// <summary>
        /// Writes text to a file (does not close it).
        /// </summary>
        /// <param name="fs">The file stream to write to</param>
        /// <param name="text">The text you wish to write to.</param>
        public static void addText(FileStream fs, String text)
        {
            byte[] bText = new UTF8Encoding(true).GetBytes(text);
            fs.Write(bText, 0, bText.Length);
        }

        /// <summary>
        /// Adds the auto generated text that belongs with every page.
        /// </summary>
        /// <param name="fs"></param>
        public static void addAutoGeneratedHeader(FileStream fs, String file_part1, String file_part2, String title)
        {
            HTMLGenerator htmlgen = new HTMLGenerator();
        
            addTextFromFile(fs, file_part1);
            addText(fs, htmlgen.wrapTag("<title> CAUCI | ", title, " - Chinese Association at the University of California, Irvine, UCI</title>"));
            addTextFromFile(fs, file_part2);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="f_out"></param>
        /// <param name="file_name"></param>
        public static void addTextFromFile(FileStream f_out, String file_name)
        {

            byte[] buffer = new byte[255];
            FileStream f_in = new FileStream(file_name, FileMode.Open, FileAccess.Read);
            int bytes = 0;
            //Read from file_in.

            while ((bytes = f_in.Read(buffer,0,255)) > 0)
                //write to file_out.
                f_out.Write(buffer, 0, bytes);

            f_in.Close();
        
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="fs"></param>
        /// <param name="file_name"></param>

        public static void addAutoGeneratedFooter(FileStream fs, String file_name)
        {
            addTextFromFile(fs, file_name);
        }
        /// <summary>
        /// Generates board pages for the website.
        /// </summary>
        /// <param name="person_list">The list of current board members</param>
        /// <param name="path">The path that the pages will be stored.</param>
        /// <param name="ext"></param>
        public static void generateBoardFiles(List<Person> person_list, String path, String ext)
        {
            String manip_path = "";
            for (int i = 0; i < person_list.Count(); ++i)
            {
                manip_path = path + person_list.ElementAt(i).getName().ToLower().Replace(' ', '_') + ext;
                Console.WriteLine("manip path:" + manip_path);
                FileStream fs = new FileStream(manip_path, FileMode.Create);
                addAutoGeneratedHeader(fs, "autoHeaderBoard_part1.html", "autoHeaderBoard_part2.html", person_list.ElementAt(i).getName());
                genBoardQuestions(person_list[i], fs);
                addAutoGeneratedFooter(fs, "autoFooterBoard.html");
                fs.Close();
            }
        }

        private static void generateBoardPageBody(FileStream fs, List<Person> personList) {
            HTMLGenerator htmlgen = new HTMLGenerator();
            String body_a = "";
            body_a = htmlgen.wrapContentsInTag("<h1>", "CA Board 2017-2018", "</h1>");
            body_a += "\r\n <br> \r\n<br>";
            body_a = htmlgen.genDivClass("header", body_a);
            body_a = htmlgen.genDivClass("col-xs-12", body_a);
            body_a = htmlgen.genDivClass("row", body_a);
            //body_a = htmlgen.genDivClass("board_header container", body_a);

            int len = personList.Count;
            int row_index = 0;
            String temp = "";
            String[] rows = new String[(personList.Count / 3) + 1];
            for (int i = 0; i < rows.Length; ++i)
                rows[i] = "";
            for (int i = 0; i < len; ++i) {
                temp += htmlgen.genImage(personList[i].getImgHeadLoc());
               /// temp = htmlgen.genDivClass("split left", temp);
                //temp = htmlgen.genDivClass("member_img", temp);
                temp += htmlgen.genDivClass("name", personList[i].getName() + "\r\n");
                temp += htmlgen.genDivClass("position", personList[i].getPosition() + "\r\n");
                temp = htmlgen.wrapContentsInTag("<a href=\"" + "pages/board/" + 
                    personList.ElementAt(i).getName().ToLower().Replace(' ', '_') + ".html\">\r\n",
                temp, "</a>");
                temp = htmlgen.genDivClass("member", temp);
               
                temp = htmlgen.genDivClass("col-xs-12 col-md-4", temp);
                
                rows[row_index] += temp;

                if (((i +1) % 3) == 0 && i != 0) 
                    row_index++;
                    //Add string to rows
                temp = "";
            }
            String body_b = "";
            for (int i = 0; i < rows.Length; ++i) { 
                rows[i] = htmlgen.genDivClass("row", rows[i]);
                body_b += rows[i];
                body_b += "\r\n";
            }
            body_b = htmlgen.genDivClass("board_header container", body_b);
            addText(fs, body_a);
            addText(fs, body_b);
            Console.WriteLine(body_a + body_b);
        }

        public static void generateBoardPage(String path, List<Person> personList) {
            Console.WriteLine("Generating board.html");
            FileStream fs = new FileStream(path, FileMode.Create);
            addAutoGeneratedHeader(fs, "autoHeader_part1.html", "autoHeader_part2.html", "Board");
            generateBoardPageBody(fs, personList);
            addAutoGeneratedFooter(fs, "autoFooter.html");
            fs.Close();
        }

        /// <summary>
        /// Generates the board page part of for each person.
        /// </summary>
        /// <param name="person">The person to generate the baord page for</param>
        /// <param name="fs">The file to write to.</param>
        private static void genBoardQuestions(Person person, FileStream fs)
        {
            HTMLGenerator htmlGen = new HTMLGenerator();

            //FileGenerator.generateBoardFiles(boardList, "C:\\Users\\Kali-Zoidberg\\Kali-Zoidberg\\Documents\\test_files\\",".html");



            String img = htmlGen.genImage(person.getImageLocation());
            img = htmlGen.genDivClass("split left", img);

            img = htmlGen.genDivClass("member_img", img);
           

            String div_img = htmlGen.genDivClass("col-xs-12 col-md-5", img);

            //Generate q and A
            String info = person.formatInfo();
            String[] ignoreQA = { "Clan", "Communication Style", "Event Frequency", "Potential Events:" };
            String qa_content = info + person.formatQA(ignoreQA);

            String div_qa = htmlGen.genDivClass("col-md-7", qa_content);
            div_qa = htmlGen.genDivClass("split right", div_qa);
            //Join Img and Q and A
            div_qa = img + div_qa;
            //wrap div_qa
            String buffer = htmlGen.genDivClass("row", div_qa);
            buffer = htmlGen.genDivClass("info container", buffer);
            addText(fs, buffer);
            //Write to file.



        }
    }
}
